# -*- coding: utf-8 -*-
"""study_performance_exams.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rol3pHTZErL2nGBKyRGhDE5Az6N8Fncx

## RED NEURONAL
"""

#pip install tensorflow

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

df = pd.read_csv("/content/StudentsPerformance.csv")

X = df[['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course']]
y = df[['math score', 'reading score', 'writing score']]

y = y.apply(pd.to_numeric, errors='coerce')

categorical_cols = X.columns.tolist()

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
    ])

X_processed = preprocessor.fit_transform(X)

# Dividir conjunto de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X_processed, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
y_train_scaled = scaler.fit_transform(y_train)
y_test_scaled = scaler.transform(y_test)

model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(3)  # Salida para math, reading y writing scores
])

model.compile(optimizer='adam', loss='mse', metrics=['mae'])

history = model.fit(
    X_train,
    y_train_scaled,
    epochs=100,
    batch_size=32,
    validation_split=0.2,
    verbose=1
)

loss, mae = model.evaluate(X_test, y_test_scaled)
print(f"Mean Absolute Error (MAE): {mae:.2f}")

new_data = pd.DataFrame([{
    'gender': 'female',
    'race/ethnicity': 'group B',
    'parental level of education': "bachelor's degree",
    'lunch': 'standard',
    'test preparation course': 'completed'
}])

new_data_processed = preprocessor.transform(new_data)
predicted_scores_scaled = model.predict(new_data_processed)

# Desescalar para obtener valores reales
predicted_scores = scaler.inverse_transform(predicted_scores_scaled)

print(f'Predicción [math, reading, writing]: {predicted_scores[0].astype(int)}')

#pip install streamlit

import joblib

# Guardar modelo
joblib.dump(model, 'model.pkl')

# Guardar preprocesador
joblib.dump(preprocessor, 'preprocessor.pkl')

import streamlit as st
import pandas as pd
import joblib

# Cargar modelo y preprocesador
model = joblib.load('model.pkl')
preprocessor = joblib.load('preprocessor.pkl')

# Título e instrucciones
st.title("🎓 Predicción de Rendimiento Académico")
st.write("Ingresa los datos del estudiante para predecir sus calificaciones.")

# Inputs del usuario
gender = st.selectbox("Género", ["female", "male"])
race_ethnicity = st.selectbox("Grupo étnico", ["group A", "group B", "group C", "group D", "group E"])
parental_education = st.selectbox(
    "Nivel educativo de los padres",
    ["high school", "some high school", "associate's degree", "some college", "bachelor's degree", "master's degree"]
)
lunch = st.selectbox("Almuerzo", ["standard", "free/reduced"])
test_prep = st.selectbox("Curso de preparación", ["none", "completed"])

# Botón de predicción
if st.button("Predecir Calificaciones"):
    # Crear DataFrame con los datos
    input_data = pd.DataFrame([{
        'gender': gender,
        'race/ethnicity': race_ethnicity,
        'parental level of education': parental_education,
        'lunch': lunch,
        'test preparation course': test_prep
    }])

    # Preprocesar y predecir
    input_processed = preprocessor.transform(input_data)
    predicted_scores = model.predict(input_processed)[0]

    # Mostrar resultados
    st.subheader("Calificaciones predichas:")
    st.write(f"🟠 Matemáticas: **{int(predicted_scores[0])}**")
    st.write(f"🔵 Lectura: **{int(predicted_scores[1])}**")
    st.write(f"🟢 Escritura: **{int(predicted_scores[2])}**")